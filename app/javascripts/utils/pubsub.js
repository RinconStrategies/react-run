/**
 * Cache our listeners
 * @type {{}}
 */
let cache = {};

/**
 * A simple pubsub module
 */
export default {

    /**
     *##broadcast
     * Broadcasts a message and payload on a particular topic
     * @param topic: The topic to broadcast on
     * @param args: The args to pass to any listeners
     */
    broadcast: ( topic, args ) => {
        cache[topic] && cache[topic].forEach(( listener ) => {
            listener.apply(null, args || []);
        });
    },
    /**
     * ##on
     * Register a receiver for a particular topic.
     * @param topic: the topic to listen to
     * @param callback: the function to call when that topic receives a message
     * @returns {*[]}
     */
    on: ( topic, callback ) => {
        if ( !cache[topic] ) {
            cache[topic] = [];
        }
        cache[topic].push(callback);
        return [topic, callback];
    },
    /**
     * ##off
     * Remove a registered listener
     * @param handle: the reference that was generated by the 'on' method
     */
    off: ( handle ) => {
        let t = handle[0];
        cache[t] && cache[t].forEach(( value, idx ) => {
            if ( value == handle[1] ) {
                cache[t].splice(idx, 1);
            }
        });
    }

}